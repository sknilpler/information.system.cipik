package com.information.system.cipik.controllers;

import com.information.system.cipik.models.Norma;
import com.information.system.cipik.models.Rashodniki;
import com.information.system.cipik.models.Sredstvo;
import com.information.system.cipik.repo.NormaRepository;
import com.information.system.cipik.repo.RashodnikiRepository;
import com.information.system.cipik.repo.SredstvoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class GroupExploitationController {

    @Autowired
    SredstvoRepository sredstvoRepository;
    @Autowired
    NormaRepository normaRepository;
    @Autowired
    RashodnikiRepository rashodnikiRepository;
    private Iterable<Sredstvo> listSredstv;
    private Sredstvo sredstvoAddToNorm;

    //////////////////средства//////////////////////

    @GetMapping("/user/station/sredstvos")
    public String sredstvoAll(Model model) {
        Iterable<Sredstvo> sredstvos = sredstvoRepository.findAll();
        model.addAttribute("sredstvos", sredstvos);
        return "user/group-explotation/station/station-type-list";
    }

    @GetMapping("/user/station/sredstvos/add")
    public String sredstvoAdd(Model model) {
        return "user/group-explotation/station/station-type-add";
    }

    @PostMapping("/user/station/sredstvos/add")
    public String sredstvoAdding(@RequestParam String name, @RequestParam String indeks, Model model) {
        Sredstvo sredstvo = new Sredstvo(name, indeks);
        sredstvoRepository.save(sredstvo);
        return "redirect:/user/station/sredstvos";
    }

    @GetMapping("/user/station/sredstvos/{id}/edit")
    public String sredstvoEdit(@PathVariable(value = "id") long id, Model model) {
        if (!sredstvoRepository.existsById(id)) {
            return "redirect:/user/station/sredstvos";
        }
        Sredstvo sredstvo = sredstvoRepository.findById(id).orElse(null);
        model.addAttribute("sredstvo", sredstvo);
        return "user/group-explotation/station/station-type-edit";
    }

    @PostMapping("/user/station/sredstvos/{id}/edit")
    public String sredstvoUpdate(@PathVariable(value = "id") long id, @RequestParam String name, @RequestParam String indeks, Model model) {
        Sredstvo sredstvo = sredstvoRepository.findById(id).orElse(null);
        sredstvo.setName(name);
        sredstvo.setIndeks(indeks);
        sredstvoRepository.save(sredstvo);
        return "redirect:/user/station/sredstvos";
    }

    @PostMapping("/user/station/sredstvos/{id}/remove")
    public String sredstvoDelete(@PathVariable(value = "id") long id, Model model) {
        Sredstvo sredstvo = sredstvoRepository.findById(id).orElse(null);
        sredstvoRepository.deleteById(id);
        return "redirect:/user/station/sredstvos";
    }

    //////////////////нормы расхода//////////////////////

    @GetMapping("/user/station/norms")
    public String normsAll(Model model, String keyword) {
        Iterable<Norma> normas = null;
        sredstvoAddToNorm = new Sredstvo("","");
        if (keyword != null) {
            listSredstv = sredstvoRepository.findAllByKeyword(keyword);
            model.addAttribute("sredstvos", listSredstv);
        } else {
            Iterable<Sredstvo> sredstvos = sredstvoRepository.findAll();
            model.addAttribute("sredstvos", sredstvos);
            listSredstv = sredstvos;
        }
        model.addAttribute("selected", sredstvoAddToNorm);
        model.addAttribute("norms", normas);
        return "user/group-explotation/norms/norms";
    }

    @GetMapping("/user/station/norms/getNormsForSredstvo/{id}")
    public String normsForSredstvo(@PathVariable(value = "id") long id, Model model) {
        Iterable<Norma> normas = normaRepository.findAllBySredstvoId(id);
        sredstvoAddToNorm = sredstvoRepository.findById(id).orElse(null);
        model.addAttribute("norms", normas);
        model.addAttribute("sredstvos",listSredstv);
        model.addAttribute("selected", sredstvoAddToNorm);
        return "user/group-explotation/norms/norms";
    }

    @GetMapping("/user/station/norms/add")
    public String normsAdd(Model model) {
        if (!sredstvoAddToNorm.getName().equals("")) {
            model.addAttribute("rashodniks", rashodnikiRepository.findAll());
            model.addAttribute("sredstvo", sredstvoAddToNorm);
            return "user/group-explotation/norms/norm-add";
        } else {
            return "redirect:/user/station/norms";
        }
    }

    @PostMapping("/user/station/norms/add")
    public String normsAdding(@RequestParam Long dropRash, @RequestParam double number, Model model) {
        if (!sredstvoAddToNorm.getName().equals("")) {
            Rashodniki rashodniki = rashodnikiRepository.findById(dropRash).orElse(null);
            Norma norma = new Norma(sredstvoAddToNorm, rashodniki, number);
            normaRepository.save(norma);
        }
        return "redirect:/user/station/norms";
    }

    @GetMapping("/user/station/norms/{id}/edit")
    public String normsEdit(@PathVariable(value = "id") long id, Model model) {
        if (!normaRepository.existsById(id)) {
            return "redirect:/user/station/norms";
        }
        Norma norma = normaRepository.findById(id).orElse(null);
        model.addAttribute("rashodniks",rashodnikiRepository.findAll());
        model.addAttribute("sredstvo",sredstvoAddToNorm);
        model.addAttribute("norma", norma);
        return "user/group-explotation/norms/norms-edit";
    }

    @PostMapping("/user/station/norms/{id}/edit")
    public String normsUpdate(@PathVariable(value = "id") long id, @RequestParam Rashodniki dropRash, @RequestParam double number, Model model) {
        System.out.println(dropRash.getName());
        Norma norma = normaRepository.findById(id).orElse(null);
        norma.setNumber(number);
        //norma.setRashodniki(rashodnikiRepository.findById(dropRash).orElse(null));
        normaRepository.save(norma);
        return "redirect:/user/station/norms";
    }

    @PostMapping("/user/station/norms/{id}/remove")
    public String normsDelete(@PathVariable(value = "id") long id, Model model) {
        Norma norma = normaRepository.findById(id).orElse(null);
        normaRepository.deleteById(id);
        return "redirect:/user/station/norms";
    }

    //////////////расходники///////////
    @GetMapping("/user/station/rashs/add")
    public String rashAll(Model model) {
        Iterable<Rashodniki> rashodnikis = rashodnikiRepository.findAll();
        model.addAttribute("rashs", rashodnikis);
        return "user/group-explotation/rashodniki/rashodniki";
    }

    @PostMapping("/user/station/rashs/add")
    public String rashAdd(@RequestParam String name, @RequestParam String ed_izm, Model model) {
        Rashodniki rash = new Rashodniki(name, ed_izm);
        rashodnikiRepository.save(rash);
        return "redirect:/user/station/rashs/add";
    }

    @GetMapping("/user/station/rashs/{id}/edit")
    public String rashEdit(@PathVariable(value = "id") long id, Model model) {
        if (!rashodnikiRepository.existsById(id)) {
            return "redirect:/user/station/rashs/add";
        }
        Rashodniki rash = rashodnikiRepository.findById(id).orElse(null);
        model.addAttribute("rash", rash);
        return "user/group-explotation/rashodniki/rashodniki-edit";
    }

    @PostMapping("/user/station/rashs/{id}/edit")
    public String rashUpdate(@PathVariable(value = "id") long id, @RequestParam String name, @RequestParam String ed_izm, Model model) {
        Rashodniki rash = rashodnikiRepository.findById(id).orElse(null);
        rash.setName(name);
        rash.setEd_izm(ed_izm);
        rashodnikiRepository.save(rash);
        return "redirect:/user/station/rashs/add";
    }

    @PostMapping("/user/station/rashs/{id}/remove")
    public String rashDelete(@PathVariable(value = "id") long id, Model model) {
        Rashodniki rashodniki = rashodnikiRepository.findById(id).orElse(null);
        rashodnikiRepository.deleteById(id);
        return "redirect:/user/station/rashs/add";
    }
}
